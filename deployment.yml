##########################################
# DEPLOYMENT
##########################################

# Redis deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: redis
  name: redis
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: redis
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: redis
    spec:
      hostname: redis
      containers:
        - image: redis:4.0
          livenessProbe:
            exec:
              command:
              - redis-cli
              - ping
          name: redis
          ports:
            - containerPort: 6379
          resources: {}
          tty: true
          volumeMounts:
            - mountPath: /data
              name: redis-data
      restartPolicy: Always
      volumes:
        - name: redis-data
          persistentVolumeClaim:
            claimName: redis-data
status: {}
---
# Postgres Deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: postgres
  name: postgres
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: postgres
    spec:
      hostname: postgres
      containers:
        - env:
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgrespassword
                  key: password
            - name: PGDATA
              value: /var/lib/postgresql/data/rstuf
          image: postgres:15.1
          livenessProbe:
            exec:
              command:
                - pg_isready
                - -U
                - postgres
                - -d
                - postgres
          name: postgres
          resources: {}
          tty: true
          volumeMounts:
            - mountPath: /var/lib/postgresql/data
              name: postgres-data
      restartPolicy: Always
      volumes:
        - name: postgres-data
          persistentVolumeClaim:
            claimName: postgres-data
status: {}
---
# RSTUF Worker deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: rstuf-worker
  name: rstuf-worker
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: rstuf-worker
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: rstuf-worker
    spec:
      hostname: rstuf-worker
      containers:
        - name: rstuf-worker
          image: ghcr.io/repository-service-tuf/repository-service-tuf-worker:dev
          env:
            - name: RSTUF_BROKER_SERVER
              value: redis://redis
            - name: RSTUF_REDIS_SERVER
              value: redis://redis
            - name: RSTUF_SQL_SERVER
              value: postgres
            - name: RSTUF_SQL_USER
              value: "postgres"
            - name: RSTUF_SQL_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgrespassword
                  key: password
            - name: RSTUF_KEYVAULT_BACKEND
              value: LocalKeyVault
            - name: RSTUF_LOCAL_KEYVAULT_PATH
              value: /var/opt/repository-service-tuf/keystorage
            - name: RSTUF_LOCAL_KEYVAULT_KEYS
              value: /run/secrets/onlinekey/keys
            - name: RSTUF_STORAGE_BACKEND
              value: AWSS3
            - name: RSTUF_AWSS3_STORAGE_BUCKET
              value: metadata.rstuf.kairo.dev
            - name: RSTUF_AWSS3_STORAGE_ENDPOINT_URL
              value: https://nl-ams-1.linodeobjects.com
            - name: RSTUF_AWSS3_STORAGE_ACCESS_KEY
              value: OPGWTYNVZ2B1WGPJ8SAQ
            - name: RSTUF_AWSS3_STORAGE_SECRET_KEY
              value: 2F8YkEkO6dSXBVCJWRw6WrEoRze7UfzhQAvVOyih
          resources: {}
          tty: true
          volumeMounts:
            - name: onlinekey
              mountPath: "/run/secrets/onlinekey"
              readOnly: true
            - name: postgrespassword
              mountPath: "/run/secrets/postgrespassword"
              readOnly: true
            - mountPath: "/var/opt/repository-service-tuf/keystorage"
              name: rstuf-keystorage
      restartPolicy: Always
      volumes:
        - name: rstuf-keystorage
          persistentVolumeClaim:
            claimName: rstuf-keystorage
        - name: onlinekey
          secret:
            secretName: onlinekey
        - name: postgrespassword
          secret:
            secretName: postgrespassword
status: {}
---
# RSTUF API deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: rstuf-api
  name: rstuf-api
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: rstuf-api
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: rstuf-api
    spec:
      hostname: rstuf-api
      volumes:
        - name: apicert
          secret:
            secretName: dotfile-cert
        - name: apicertkey
          secret:
            secretName: dotfile-certkey
      containers:
        - name: rstuf-api
          image: ghcr.io/repository-service-tuf/repository-service-tuf-api:dev
          env:
            - name: RSTUF_BROKER_SERVER
              value: redis://redis
            - name: RSTUF_REDIS_SERVER
              value: redis://redis
            # - name: SECRETS_RSTUF_SSL_CERT
            #   value: "/run/secrets/apicert/.cert"
            # - name: SECRETS_RSTUF_SSL_KEY
            #   value: "/run/secrets/apicertkey/.certkey"
          ports:
            # - containerPort: 443
            - containerPort: 80
          resources: {}
          volumeMounts:
            - name: apicert
              mountPath: "/run/secrets/apicert"
              readOnly: true
            - name: apicertkey
              mountPath: "/run/secrets/apicertkey"
              readOnly: true
      restartPolicy: Always
status: {}
---
# API-Gateway deployment
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    io.kompose.service: api-gateway
  name: api-gateway
spec:
  replicas: 1
  selector:
    matchLabels:
      io.kompose.service: api-gateway
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        io.kompose.service: api-gateway
    spec:
      securityContext:
        fsGroup: 1000
      containers:
        - env:
            - name: KONG_DATABASE
              value: "off"
            - name: KONG_DECLARATIVE_CONFIG
              value: /kong/kong.yml
            - name: KONG_PROXY_ACCESS_LOG
              value: /dev/stdout
            - name: KONG_ADMIN_ACCESS_LOG
              value: /dev/stdout
            - name: KONG_PROXY_ERROR_LOG
              value: /dev/stderr
            - name: KONG_ADMIN_ERROR_LOG
              value: /dev/stderr
            - name: KONG_SSL_CERT
              value: /run/secrets/apicert/.cert
            - name: KONG_SSL_CERT_KEY
              value: /run/secrets/apicertkey/.certkey
          image: kong:3.4-ubuntu
          name: api-gateway
          ports:
            - containerPort: 8443
          resources: {}
          volumeMounts:
            - mountPath: /kong
              name: apigateway-data
            - name: apicert
              mountPath: "/run/secrets/apicert"
              readOnly: true
            - name: apicertkey
              mountPath: "/run/secrets/apicertkey"
              readOnly: true
      volumes:
        - name: apicert
          secret:
            secretName: dotfile-cert
        - name: apicertkey
          secret:
            secretName: dotfile-certkey
        - name: apigateway-data
          persistentVolumeClaim:
            claimName: apigateway-data

      hostAliases:
        - ip: "10.2.2.18"
          hostnames:
          - "rstuf-api"
      restartPolicy: Always
status: {}
---
# http deployment (Web Server to expose metadata public)
apiVersion: apps/v1
kind: Deployment
metadata:
  name: web-metadata
  labels:
    io.kompose.service: web-metadata
spec:
  replicas: 0
  selector:
    matchLabels:
      io.kompose.service: web-metadata
  template:
    metadata:
      labels:
        io.kompose.service: web-metadata
    spec:
      containers:
        - name: web-metadata
          image: httpd
          ports:
            - containerPort: 80
          resources: {}
          volumeMounts:
            - mountPath: /usr/local/apache2/htdocs
              name: rstuf-storage
      restartPolicy: Always
      volumes:
        - name: rstuf-storage
          persistentVolumeClaim:
            claimName: rstuf-storage